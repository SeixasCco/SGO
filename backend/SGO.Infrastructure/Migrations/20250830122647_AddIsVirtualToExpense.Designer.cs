// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SGO.Infrastructure;

#nullable disable

namespace SGO.Infrastructure.Migrations
{
    [DbContext(typeof(SgoDbContext))]
    [Migration("20250830122647_AddIsVirtualToExpense")]
    partial class AddIsVirtualToExpense
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SGO.Core.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SGO.Core.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observations")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SGO.Core.ContractInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("text");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InssValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("IssValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractInvoices");
                });

            modelBuilder.Entity("SGO.Core.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CostCenters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000001"),
                            Name = "Alimentação/ mercado"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000002"),
                            Name = "Combustível"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000003"),
                            Name = "Despesas de aluguel"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000004"),
                            Name = "Despesas de luz, água e internet"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000005"),
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000006"),
                            Name = "EPI's e uniformes"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000007"),
                            Name = "Exames e Clínicas (admissionais, periódicos, demissionais)"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000008"),
                            Name = "Farmácia e medicamentos"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000009"),
                            Name = "Ferramentas/ ferragens"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000023"),
                            Name = "Folhas de 13º"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000024"),
                            Name = "Folhas de Adiantamento Salarial"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000025"),
                            Name = "Folhas de férias"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000010"),
                            Name = "Folhas de pagamento"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000011"),
                            Name = "Honorários administrativos"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000012"),
                            Name = "Honorários de contabilidade"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000013"),
                            Name = "Honorários jurídicos"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000014"),
                            Name = "Hospedagens"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000015"),
                            Name = "Locação de Container"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000017"),
                            Name = "Locação de Munck/ Guindaste"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000016"),
                            Name = "Locação de PTA"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000018"),
                            Name = "Mecânica e manutenções"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000019"),
                            Name = "Passagens de folga de campo"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000020"),
                            Name = "Passagens de funcionários (admissão e rescisão)"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000021"),
                            Name = "Pedágios"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000026"),
                            Name = "Serviços de Engenharia (ART, Projetos)"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000022"),
                            Name = "Serviços de treinamento"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000027"),
                            Name = "Tributos (guias de INSS. FGTS, DCTFWeb, Impostos)"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000028"),
                            Name = "Veículos (multas, licenciamentos, taxas)"
                        },
                        new
                        {
                            Id = new Guid("c1b7c9b0-1000-4000-8000-000000000029"),
                            Name = "Verbas rescisórias"
                        });
                });

            modelBuilder.Entity("SGO.Core.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SGO.Core.ExpenseAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectExpenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("StoredPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectExpenseId");

                    b.ToTable("ExpenseAttachment");
                });

            modelBuilder.Entity("SGO.Core.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CNO")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Contractor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAdditive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OriginalProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceTaker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId1");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SGO.Core.ProjectEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("SGO.Core.ProjectExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CostCenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetailsJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsAutomaticallyCalculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("boolean");

                    b.Property<string>("Observations")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectExpenses");
                });

            modelBuilder.Entity("SGO.Core.Contract", b =>
                {
                    b.HasOne("SGO.Core.Project", "Project")
                        .WithMany("Contracts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGO.Core.ContractInvoice", b =>
                {
                    b.HasOne("SGO.Core.Contract", "Contract")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SGO.Core.Employee", b =>
                {
                    b.HasOne("SGO.Core.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SGO.Core.ExpenseAttachment", b =>
                {
                    b.HasOne("SGO.Core.ProjectExpense", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGO.Core.Project", b =>
                {
                    b.HasOne("SGO.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SGO.Core.ProjectEmployee", b =>
                {
                    b.HasOne("SGO.Core.Employee", "Employee")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGO.Core.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGO.Core.ProjectExpense", b =>
                {
                    b.HasOne("SGO.Core.Contract", "Contract")
                        .WithMany("Expenses")
                        .HasForeignKey("ContractId");

                    b.HasOne("SGO.Core.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGO.Core.Project", "Project")
                        .WithMany("Expenses")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Contract");

                    b.Navigation("CostCenter");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGO.Core.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SGO.Core.Contract", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SGO.Core.Employee", b =>
                {
                    b.Navigation("ProjectEmployees");
                });

            modelBuilder.Entity("SGO.Core.Project", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Expenses");

                    b.Navigation("ProjectEmployees");
                });

            modelBuilder.Entity("SGO.Core.ProjectExpense", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
